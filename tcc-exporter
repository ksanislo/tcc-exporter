#!/usr/bin/env python3


import codecs
import json
import time
import os
import re
import urllib.parse
import urllib.request

from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.error import URLError, HTTPError

PREFIX = 'https://mytotalconnectcomfort.com/'
devices = list()

class Client(object):
  def __init__(self, username, password):
    self.username = username
    self.password = password
    self.urlopener = urllib.request.build_opener()
    self.urlopener.addheaders = [('User-Agent', 'TCC-Exporter/0.1')]
    self.urlopener.add_handler(urllib.request.HTTPCookieProcessor())
    self.login()

  def login(self):
    form = {
      'UserName': self.username,
      'Password': self.password,
      'RememberMe': 'False'
    }
    headers = {
      'Origin': PREFIX + 'portal',
    }
    data = urllib.parse.urlencode(form).encode('utf-8')
    request = urllib.request.Request(PREFIX + 'portal', data, headers)
    self.urlopener.open(PREFIX + 'portal')  # get signin cookie
    data = self.urlopener.open(request)  # actually sign in
    if '/portal/Account/LogOff' in data.read().decode():
      # successful login
      print("TCC API login successful.")
      pass
    else:
      raise ValueError("Invalid credentials")

  def _request(self, path, data={}, headers={}):
    if isinstance(data, str):
      data = data.encode('utf-8')
    elif isinstance(data, bytes):
      data = data
    elif data != {}:
      data = json.dumps(data).encode('utf-8')
    else:
      data = None
    headers = dict(headers)
    headers['X-Requested-With'] = 'XMLHttpRequest'
    headers['Accept'] = 'application/json, text/javascript'
    if data != None:
      headers['Content-Type'] = 'application/json; charset=utf-8'
    request = urllib.request.Request(PREFIX + path, data, headers)
    try:
      return self.urlopener.open(request)  # actually fetch
    except HTTPError as e:
      print('TCC API status:', e.code, '-', e.reason)
      if (e.code == 401):
        print('Retrying Client.login()')
        self.login()
        return self._request(path, data, headers)
      return e.code
    except URLError as e:
      print('TCC API failure:', e.reason)
      return None

  def _request_data(self, path, data={}, headers={}):
    data = self._request(path, data, headers)
    if data is None or isinstance(data, int):
      return data
    reader = codecs.getreader(data.headers.get_content_charset())
    return reader(data)

  def locations(self):
    path = 'portal/Location/GetLocationListData?page=1&filter='
    data = self._request_data(path, '')
    if data is None or isinstance(data, int):
      return data
    return json.load(data)
    
  def location_overview(self, locationId):
    path = 'portal/Device/GetZoneListData?locationId=%s&page=1' % (locationId,)
    data = self._request_data(path, '')
    if data is None or isinstance(data, int):
      return data
    return json.load(data)

  def device_status(self, device_id):
    utc_seconds = time.mktime(time.gmtime())
    path = 'portal/Device/CheckDataSession/%s?_=%s' % (device_id, utc_seconds)
    data = self._request_data(path)
    if isinstance(data, int):
      if (data == 401): # Login failure, lets try to login again.
        print('Retrying Client.login()')
        self.login()
        data = self._request_data(path)
        if isinstance(data, int):
          return data # Another failure, just return the code.
        return self._request_data(path)
      return data
    try:
      return json.load(data)
    except:
      print('TCC API returned invalid data.')
      return None


class Server(BaseHTTPRequestHandler):
  def do_GET(self):
    results = bytes()
    for device in devices:
      data = client.device_status(device['DeviceID'])
      if isinstance(data, dict):
        results = results + do_stuff(device, device['DeviceID'], data).encode('utf-8')
    if results:
      self.send_response(200)
    else:
      if isinstance(data, int):
        self.send_response(data)
      else:
        self.send_response(500)
    self.send_header('Content-type','text/html')
    self.end_headers()
    if results:
      self.wfile.write(results)
    return


def case_convert(name):
  string = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', string).lower()


def device_info(device):
  retval = str()
  for key in device:
    if retval:
      retval = retval + ","
    retval = retval + case_convert(key) + '="' + str(device[key]) + '"'
  return retval


def do_stuff(device, name, obj):
  retval = str()
  if isinstance(obj, dict):
    for each in obj:
      retval = retval + do_stuff(device, each, obj[each])
  if isinstance(obj, (int, bool)):
    if name not in device:
      retval = retval + str("# HELP tcc_" + case_convert(name) + " Total_Control_Comfort value "+ name + "\n")
      retval = retval + str("# TYPE tcc_" + case_convert(name) + " gauge\n")
      retval = retval + str("tcc_" + case_convert(name) + "{" + device_info(device) + "} " + str(int(obj)) + "\n")
  return retval
  

def main():
  global client, devices 
  client = Client(os.environ.get('TCC_USERNAME'), os.environ.get('TCC_PASSWORD'))

  for location in client.locations():
    for device in location['Devices']:
      devices.append({ "DeviceID": device['DeviceID'], "LocationID": device['LocationID'], "MacID": device['MacID'], "Name": device['Name'] })

  httpd = HTTPServer(('', int(os.environ.get('TCC_EXPORTER_PORT'))), Server)
  httpd.serve_forever()


if __name__ == '__main__':
  main()

